#!/bin/bash

# chezmoi run_once script to install binary tools to ~/.local/bin
# This script will only run once unless the filename changes

set -euo pipefail

BIN_DIR="$HOME/.local/bin"
mkdir -p "$BIN_DIR"

echo "Installing binary tools to $BIN_DIR..."

# Function to download and install a binary
install_binary() {
    local name="$1"
    local url="$2"
    local target_path="$BIN_DIR/$name"
    
    if [[ -f "$target_path" ]]; then
        echo "‚úì $name already exists, skipping..."
        return 0
    fi
    
    echo "üì• Downloading $name from $url"
    curl -L --progress-bar --show-error "$url" -o "$target_path"
    chmod +x "$target_path"
    echo "‚úÖ Installed $name"
}

# Function to download and extract from archive
install_from_archive() {
    local name="$1"
    local url="$2"
    local extract_path="$3"  # path within archive
    local temp_dir=$(mktemp -d)
    
    if [[ -f "$BIN_DIR/$name" ]]; then
        echo "‚úì $name already exists, skipping..."
        return 0
    fi
    
    echo "üì• Downloading and extracting $name..."
    echo "üîó URL: $url"
    cd "$temp_dir"
    
    if [[ "$url" == *.tar.gz ]] || [[ "$url" == *.tgz ]]; then
        curl -L --progress-bar --show-error "$url" | tar -xz
    elif [[ "$url" == *.tar.xz ]]; then
        curl -L --progress-bar --show-error "$url" | tar -xJ
    elif [[ "$url" == *.zip ]]; then
        curl -L --progress-bar --show-error "$url" -o archive.zip
        echo "üì¶ Extracting archive..."
        unzip -q archive.zip
        rm archive.zip
    fi
    
    if [[ -f "$extract_path" ]]; then
        cp "$extract_path" "$BIN_DIR/$name"
        chmod +x "$BIN_DIR/$name"
        echo "‚úÖ Installed $name"
    else
        echo "‚ùå Failed to find $extract_path in archive"
        echo "üìÅ Available files:"
        ls -la
    fi
    
    cd - > /dev/null
    rm -rf "$temp_dir"
}

# Detect architecture
ARCH=$(uname -m)
case $ARCH in
    x86_64) ARCH="x86_64" ;;
    aarch64|arm64) ARCH="aarch64" ;;
    *) echo "Unsupported architecture: $ARCH"; exit 1 ;;
esac

echo "üñ•Ô∏è  Detected architecture: $ARCH"

# Install fd (find alternative)
echo "üîç Installing fd..."
FD_VERSION="v10.2.0"
FD_URL="https://github.com/sharkdp/fd/releases/download/${FD_VERSION}/fd-${FD_VERSION}-${ARCH}-unknown-linux-gnu.tar.gz"
install_from_archive "fd" "$FD_URL" "fd-${FD_VERSION}-${ARCH}-unknown-linux-gnu/fd"

# Install ripgrep (rg)
echo "üîç Installing ripgrep..."
RG_VERSION="14.1.1"
RG_URL="https://github.com/BurntSushi/ripgrep/releases/download/${RG_VERSION}/ripgrep-${RG_VERSION}-${ARCH}-unknown-linux-musl.tar.gz"
install_from_archive "rg" "$RG_URL" "ripgrep-${RG_VERSION}-${ARCH}-unknown-linux-musl/rg"

# Install Neovim
echo "üìù Installing Neovim..."
if [[ ! -f "$BIN_DIR/nvim" ]]; then
    # Check glibc version
    GLIBC_VER=$(ldd --version | head -n1 | grep -oE '[0-9]+\.[0-9]+')
    REQUIRED_GLIBC=2.12
    
    echo "üîç Detected glibc version: $GLIBC_VER"
    
    if [ "$(printf '%s\n' "$REQUIRED_GLIBC" "$GLIBC_VER" | sort -V | head -n1)" = "$REQUIRED_GLIBC" ]; then
        NVIM_VERSION="v0.11.1"
        NVIM_URL="https://github.com/neovim/neovim/releases/download/${NVIM_VERSION}/nvim-linux-${ARCH}.appimage"
        
        echo "üì• Downloading Neovim ${NVIM_VERSION}..."
        echo "üîó URL: $NVIM_URL"
        temp_dir=$(mktemp -d)
        cd "$temp_dir"
        
        curl -L --progress-bar --show-error "$NVIM_URL" -o nvim.appimage
        chmod +x nvim.appimage
        
        echo "üì¶ Extracting AppImage..."
        # Extract AppImage to avoid FUSE issues
        ./nvim.appimage --appimage-extract > /dev/null
        
        # Remove existing squashfs-root if it exists
        if [[ -d "$BIN_DIR/squashfs-root" ]]; then
            echo "üóëÔ∏è  Removing existing squashfs-root..."
            rm -rf "$BIN_DIR/squashfs-root"
        fi
        
        # Move extracted files to ~/.local/bin/squashfs-root
        mv squashfs-root "$BIN_DIR/"
        
        # Create symlink
        ln -sf "$BIN_DIR/squashfs-root/usr/bin/nvim" "$BIN_DIR/nvim"
        
        cd - > /dev/null
        rm -rf "$temp_dir"
        echo "‚úÖ Installed nvim"
    else
        echo "‚ö†Ô∏è  glibc version $GLIBC_VER < $REQUIRED_GLIBC, skipping Neovim installation"
    fi
else
    echo "‚úì nvim already exists, skipping..."
fi

# Install clangd
echo "üîß Installing clangd..."
if [[ ! -f "$BIN_DIR/clangd" ]]; then
    CLANGD_VERSION="19.1.2"
    CLANGD_URL="https://github.com/clangd/clangd/releases/download/${CLANGD_VERSION}/clangd-linux-${CLANGD_VERSION}.zip"
    CLANGD_DIR="$HOME/.local/clangd/clangd_${CLANGD_VERSION}"
    
    echo "üìÅ Installing to: $CLANGD_DIR"
    mkdir -p "$CLANGD_DIR"
    temp_dir=$(mktemp -d)
    cd "$temp_dir"
    
    echo "üì• Downloading clangd ${CLANGD_VERSION}..."
    echo "üîó URL: $CLANGD_URL"
    curl -L --progress-bar --show-error "$CLANGD_URL" -o clangd.zip
    
    echo "üì¶ Extracting clangd..."
    unzip -q clangd.zip
    
    # Copy extracted files to clangd directory (handle existing files)
    if command -v rsync >/dev/null 2>&1; then
        rsync -a clangd_${CLANGD_VERSION}/ "$CLANGD_DIR/"
    else
        cp -rf clangd_${CLANGD_VERSION}/* "$CLANGD_DIR/"
    fi
    
    # Create symlink in bin directory
    ln -sf "$CLANGD_DIR/bin/clangd" "$BIN_DIR/clangd"
    
    cd - > /dev/null
    rm -rf "$temp_dir"
    echo "‚úÖ Installed clangd"
else
    echo "‚úì clangd already exists, skipping..."
fi

# Install lazygit
echo "üîÄ Installing lazygit..."
LAZYGIT_VERSION="v0.51.1"
LAZYGIT_VERSION_NUM=${LAZYGIT_VERSION#v}  # Remove 'v' prefix for filename
LAZYGIT_URL="https://github.com/jesseduffield/lazygit/releases/download/${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION_NUM}_Linux_x86_64.tar.gz"
install_from_archive "lazygit" "$LAZYGIT_URL" "lazygit"

# Add PATH to .zshrc if not already present
echo "üîß Updating PATH configuration..."
if ! grep -q "\.local/bin" ~/.zshrc 2>/dev/null; then
    echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.zshrc
    echo "üìù Added ~/.local/bin to PATH in .zshrc"
fi

if ! grep -q "clangd_${CLANGD_VERSION}/bin" ~/.zshrc 2>/dev/null; then
    echo 'export PATH="$HOME/.local/clangd/clangd_19.1.2/bin:$PATH"' >> ~/.zshrc
    echo "üìù Added clangd to PATH in .zshrc"
fi

echo "üéâ All binary tools installation completed!"
echo "üìç Tools installed in: $BIN_DIR"
echo "üîß Please restart your terminal or run: source ~/.zshrc"

# Verify installations
echo ""
echo "üîç Verifying installations:"
for tool in fd rg nvim clangd lazygit; do
    if command -v "$tool" >/dev/null 2>&1; then
        version=$("$tool" --version 2>/dev/null | head -n1 || echo "version info not available")
        echo "‚úÖ $tool: $version"
    else
        echo "‚ùå $tool: not found in PATH"
    fi
done 