# =============================================================================
# ZSH 现代化配置增强
# =============================================================================

# Oh My Zsh 配置
export ZSH="$HOME/.oh-my-zsh"

# 主题设置 (可选择: agnoster, powerlevel10k, robbyrussell, af-magic, bira)
ZSH_THEME="agnoster"

# 插件配置
plugins=(
    git                    # Git 快捷命令和状态显示
    zsh-autosuggestions   # 自动建议历史命令
    zsh-syntax-highlighting # 语法高亮
    colored-man-pages     # 彩色 man 页面
    command-not-found     # 命令未找到时建议包名
    extract               # 智能解压缩
    z                     # 智能目录跳转
    sudo                  # 双击 ESC 添加 sudo
    web-search            # 快速网络搜索
    copypath              # 复制当前路径
    copybuffer            # 复制当前命令行
    dirhistory            # 目录历史导航
    jsontools             # JSON 工具
    urltools              # URL 工具
    encode64              # Base64 编码解码
)

# 如果 Oh My Zsh 存在则加载
if [[ -f "$ZSH/oh-my-zsh.sh" ]]; then
    source "$ZSH/oh-my-zsh.sh"
else
    # 如果没有 Oh My Zsh，使用原有配置
    source /usr/share/zsh/config/zshrc
    export PROMPT='%F{cyan}%n@%F{yellow}%m:%F{green}%~%f > '
fi

# =============================================================================
# ZSH 选项配置
# =============================================================================

# 历史记录配置
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

# 启用有用的 zsh 选项
setopt HIST_EXPIRE_DUPS_FIRST    # 首先删除重复的历史条目
setopt HIST_IGNORE_DUPS          # 不保存重复的历史条目
setopt HIST_IGNORE_ALL_DUPS      # 删除所有旧的重复条目
setopt HIST_FIND_NO_DUPS         # 搜索时不显示重复条目
setopt HIST_IGNORE_SPACE         # 以空格开头的命令不保存到历史
setopt HIST_SAVE_NO_DUPS         # 保存时不保存重复条目
setopt HIST_VERIFY               # 历史展开后等待用户确认
setopt SHARE_HISTORY             # 多个终端间共享历史
setopt APPEND_HISTORY            # 追加历史而不是覆盖
setopt INC_APPEND_HISTORY        # 立即追加历史
setopt AUTO_CD                   # 输入目录名自动 cd
setopt CORRECT                   # 命令纠错
setopt COMPLETE_IN_WORD          # 在单词中间也能补全
setopt ALWAYS_TO_END             # 补全后光标移到末尾

# 大小写不敏感的补全
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# 彩色补全
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# =============================================================================
# 键绑定增强
# =============================================================================

# 使用 Emacs 键绑定
bindkey -e

# 历史搜索
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward

# 快速编辑命令行
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^X^E' edit-command-line

# 词汇导航
bindkey '^[[1;5C' forward-word   # Ctrl+Right
bindkey '^[[1;5D' backward-word  # Ctrl+Left

# =============================================================================
# 现代化工具别名
# =============================================================================

# 如果存在更好的工具，使用它们
if command -v exa >/dev/null 2>&1; then
    alias ls='exa --icons'
    alias ll='exa -alF --icons --git'
    alias la='exa -a --icons'
    alias lt='exa --tree --icons'
fi

if command -v bat >/dev/null 2>&1; then
    alias cat='bat --paging=never'
    alias bcat='bat'
fi

if command -v fd >/dev/null 2>&1; then
    alias find='fd'
fi

if command -v rg >/dev/null 2>&1; then
    alias grep='rg'
fi

if command -v lazygit >/dev/null 2>&1; then
    alias lg='lazygit'
fi

if command -v btm >/dev/null 2>&1; then
    alias top='btm'
    alias htop='btm'
fi

if command -v dust >/dev/null 2>&1; then
    alias du='dust'
fi

# =============================================================================
# 增强功能函数
# =============================================================================

# 智能 mkdir 并进入目录
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# 快速查找并编辑文件
fvim() {
    local file
    file=$(fzf --preview 'bat --color=always --style=numbers --line-range=:500 {}' 2>/dev/null) && $EDITOR "$file"
}

# 快速进入目录
fcd() {
    local dir
    dir=$(find . -type d 2>/dev/null | fzf +m) && cd "$dir"
}

# 智能解压缩
extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# 创建备份
backup() {
    cp "$1"{,.backup-$(date +%Y%m%d_%H%M%S)}
}

# 快速启动HTTP服务器
serve() {
    local port="${1:-8000}"
    echo "🌐 Starting HTTP server on port $port"
    echo "📂 Serving: $(pwd)"
    echo "🔗 URL: http://localhost:$port"
    
    if command -v python3 >/dev/null 2>&1; then
        python3 -m http.server "$port"
    elif command -v python >/dev/null 2>&1; then
        python -m SimpleHTTPServer "$port"
    else
        echo "❌ Python not found"
    fi
}

# 系统信息显示
sysinfo() {
    echo "🖥️  System Information"
    echo "===================="
    echo "🐧 OS: $(uname -s) $(uname -r)"
    echo "💻 Architecture: $(uname -m)"
    echo "👤 User: $(whoami)"
    echo "🏠 Home: $HOME"
    echo "⏰ Uptime: $(uptime -p 2>/dev/null || uptime)"
    echo "💾 Memory: $(free -h | awk '/^Mem:/ {printf "%s/%s (%.1f%%)", $3, $2, $3/$2*100}')"
    echo "💿 Disk: $(df -h / | awk 'NR==2 {printf "%s/%s (%s)", $3, $2, $5}')"
    echo "🌡️  Load: $(uptime | awk '{print $NF}')"
}

# =============================================================================
# 环境变量增强
# =============================================================================

# 设置编辑器
if command -v nvim >/dev/null 2>&1; then
    export EDITOR='nvim'
    export VISUAL='nvim'
elif command -v vim >/dev/null 2>&1; then
    export EDITOR='vim'
    export VISUAL='vim'
else
    export EDITOR='nano'
    export VISUAL='nano'
fi

# FZF 配置 (如果安装了 fzf)
if command -v fzf >/dev/null 2>&1; then
    export FZF_DEFAULT_OPTS='
        --height 40% 
        --layout=reverse 
        --border 
        --preview="bat --color=always --style=numbers --line-range=:500 {}" 
        --preview-window=right:50%:wrap
    '
    
    if command -v fd >/dev/null 2>&1; then
        export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    fi
fi

# =============================================================================
# 原有配置保持不变 - PATH设置
# =============================================================================

# PATH 设置
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.local/clangd/clangd_19.1.2/bin:$PATH"

# =============================================================================
# 代理开启关闭快捷命令
# =============================================================================

# 代理服务器配置 (根据你的实际代理服务器修改)
PROXY_HOST="10.0.11.100"
PROXY_PORT="7890"
PROXY_URL="http://${PROXY_HOST}:${PROXY_PORT}"

# 开启代理
function proxy_on() {
    export http_proxy="${PROXY_URL}"
    export https_proxy="${PROXY_URL}"
    export HTTP_PROXY="${PROXY_URL}"
    export HTTPS_PROXY="${PROXY_URL}"
    export ftp_proxy="${PROXY_URL}"
    export FTP_PROXY="${PROXY_URL}"
    export all_proxy="${PROXY_URL}"
    export ALL_PROXY="${PROXY_URL}"
    
    # 设置不走代理的地址 (本地地址和内网地址)
    export no_proxy="localhost,127.0.0.1,10.0.0.0/8,192.168.0.0/16,172.16.0.0/12,::1"
    export NO_PROXY="localhost,127.0.0.1,10.0.0.0/8,192.168.0.0/16,172.16.0.0/12,::1"
    
    echo "🌐 代理已开启"
    echo "   HTTP Proxy:  ${http_proxy}"
    echo "   HTTPS Proxy: ${https_proxy}"
    echo "   No Proxy:    ${no_proxy}"
}

# 关闭代理
function proxy_off() {
    unset http_proxy
    unset https_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    unset ftp_proxy
    unset FTP_PROXY
    unset all_proxy
    unset ALL_PROXY
    unset no_proxy
    unset NO_PROXY
    
    echo "🚫 代理已关闭"
}

# 查看代理状态
function proxy_status() {
    echo "📡 代理状态："
    if [ -n "$http_proxy" ]; then
        echo "   ✅ 代理已开启"
        echo "   HTTP:  ${http_proxy:-未设置}"
        echo "   HTTPS: ${https_proxy:-未设置}"
        echo "   No Proxy: ${no_proxy:-未设置}"
    else
        echo "   ❌ 代理已关闭"
    fi
}

# 测试代理连接
function proxy_test() {
    if [ -n "$http_proxy" ]; then
        echo "🔍 测试代理连接..."
        echo "当前代理: ${http_proxy}"
        
        # 测试代理服务器是否可达
        if curl -s --connect-timeout 5 --proxy "${http_proxy}" "http://www.google.com" > /dev/null; then
            echo "✅ 代理连接正常"
        else
            echo "❌ 代理连接失败"
        fi
        
        # 显示当前 IP
        echo "🌍 当前外网 IP:"
        curl -s --connect-timeout 10 --proxy "${http_proxy}" "https://ipinfo.io/ip" || echo "获取 IP 失败"
    else
        echo "❌ 代理未开启，请先运行 proxy_on"
    fi
}

# Git 代理设置
function git_proxy_on() {
    git config --global http.proxy "${PROXY_URL}"
    git config --global https.proxy "${PROXY_URL}"
    echo "✅ Git 代理已开启: ${PROXY_URL}"
}

function git_proxy_off() {
    git config --global --unset http.proxy
    git config --global --unset https.proxy
    echo "✅ Git 代理已关闭"
}

function git_proxy_status() {
    echo "📡 Git 代理状态："
    local git_http_proxy=$(git config --global --get http.proxy)
    local git_https_proxy=$(git config --global --get https.proxy)
    
    if [ -n "$git_http_proxy" ] || [ -n "$git_https_proxy" ]; then
        echo "   ✅ Git 代理已开启"
        echo "   HTTP:  ${git_http_proxy:-未设置}"
        echo "   HTTPS: ${git_https_proxy:-未设置}"
    else
        echo "   ❌ Git 代理已关闭"
    fi
}

# 快捷别名
alias pon='proxy_on'           # 开启代理
alias poff='proxy_off'         # 关闭代理
alias pst='proxy_status'       # 查看代理状态
alias ptest='proxy_test'       # 测试代理
alias gpon='git_proxy_on'      # 开启 Git 代理
alias gpoff='git_proxy_off'    # 关闭 Git 代理
alias gpst='git_proxy_status'  # 查看 Git 代理状态

# 自动检测并提示代理状态
function check_proxy_on_startup() {
    if [ -n "$http_proxy" ]; then
        echo "🌐 检测到代理已开启: ${http_proxy}"
    fi
}

# 启动时检查代理状态
check_proxy_on_startup

# =============================================================================
# 基础快捷命令 (不与现代工具冲突)
# =============================================================================

# 文件和目录操作
# ll, la 等会被现代工具重新定义，这里提供后备
if ! command -v exa >/dev/null 2>&1 && ! command -v eza >/dev/null 2>&1; then
    alias ll='ls -alF'
    alias la='ls -A'
    alias l='ls -CF'
fi

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ~='cd ~'
alias -- -='cd -'

# 文件查看和编辑 (如果没有现代工具)
if ! command -v bat >/dev/null 2>&1; then
    alias cat='cat -n'          # 显示行号
fi

if ! command -v rg >/dev/null 2>&1; then
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# 系统信息
alias df='df -h'             # 人性化显示磁盘使用
if ! command -v dust >/dev/null 2>&1; then
    alias du='du -h'         # 人性化显示目录大小
fi
alias free='free -h'         # 人性化显示内存使用
alias ps='ps auxf'           # 详细进程信息

# 网络工具
alias ping='ping -c 5'       # 默认 ping 5 次
alias wget='wget -c'         # 支持断点续传

# 安全操作
alias rm='rm -i'             # 删除前确认

# 快速查找 (如果没有现代工具)
if ! command -v fd >/dev/null 2>&1; then
    alias f='find . -name'   # 快速查找文件
fi
alias h='history | grep'     # 在历史记录中搜索

# 进程管理
alias killall='pkill -f'     # 根据名称杀死进程
alias ports='netstat -tulanp' # 查看端口占用

# =============================================================================
# Git 用户快速切换
# =============================================================================

# Git 用户配置预设
GIT_USER_WORK_NAME="zhaow"
GIT_USER_WORK_EMAIL="zhaow@zhcomputing.com"

GIT_USER_PERSONAL_NAME="zhaowei2025"
GIT_USER_PERSONAL_EMAIL="zhaowei2025@protonmail.com"

# 切换到工作账户
function git_work() {
    git config --global user.name "${GIT_USER_WORK_NAME}"
    git config --global user.email "${GIT_USER_WORK_EMAIL}"
    echo "🏢 已切换到工作 Git 账户："
    echo "   姓名: ${GIT_USER_WORK_NAME}"
    echo "   邮箱: ${GIT_USER_WORK_EMAIL}"
}

# 切换到个人账户
function git_personal() {
    git config --global user.name "${GIT_USER_PERSONAL_NAME}"
    git config --global user.email "${GIT_USER_PERSONAL_EMAIL}"
    echo "👤 已切换到个人 Git 账户："
    echo "   姓名: ${GIT_USER_PERSONAL_NAME}"
    echo "   邮箱: ${GIT_USER_PERSONAL_EMAIL}"
}

# 查看当前 Git 用户
function git_whoami() {
    local current_name=$(git config --global user.name)
    local current_email=$(git config --global user.email)
    
    echo "📋 当前 Git 用户信息："
    echo "   姓名: ${current_name:-未设置}"
    echo "   邮箱: ${current_email:-未设置}"
    
    # 判断当前是哪个账户
    if [[ "$current_name" == "$GIT_USER_WORK_NAME" && "$current_email" == "$GIT_USER_WORK_EMAIL" ]]; then
        echo "   类型: 🏢 工作账户"
    elif [[ "$current_name" == "$GIT_USER_PERSONAL_NAME" && "$current_email" == "$GIT_USER_PERSONAL_EMAIL" ]]; then
        echo "   类型: 👤 个人账户"
    else
        echo "   类型: ❓ 其他账户"
    fi
}

# 为当前仓库设置特定的 Git 用户（不影响全局配置）
function git_local_work() {
    git config user.name "${GIT_USER_WORK_NAME}"
    git config user.email "${GIT_USER_WORK_EMAIL}"
    echo "🏢 已为当前仓库设置工作账户："
    echo "   姓名: ${GIT_USER_WORK_NAME}"
    echo "   邮箱: ${GIT_USER_WORK_EMAIL}"
}

function git_local_personal() {
    git config user.name "${GIT_USER_PERSONAL_NAME}"
    git config user.email "${GIT_USER_PERSONAL_EMAIL}"
    echo "👤 已为当前仓库设置个人账户："
    echo "   姓名: ${GIT_USER_PERSONAL_NAME}"
    echo "   邮箱: ${GIT_USER_PERSONAL_EMAIL}"
}

# 查看当前仓库的 Git 配置
function git_local_whoami() {
    if [[ -d .git ]]; then
        local local_name=$(git config user.name)
        local local_email=$(git config user.email)
        local global_name=$(git config --global user.name)
        local global_email=$(git config --global user.email)
        
        echo "📋 当前仓库 Git 配置："
        echo "   本地姓名: ${local_name:-使用全局配置}"
        echo "   本地邮箱: ${local_email:-使用全局配置}"
        echo "   全局姓名: ${global_name:-未设置}"
        echo "   全局邮箱: ${global_email:-未设置}"
        
        # 实际生效的配置
        local effective_name="${local_name:-$global_name}"
        local effective_email="${local_email:-$global_email}"
        echo "   生效配置: ${effective_name} <${effective_email}>"
    else
        echo "❌ 当前目录不是 Git 仓库"
    fi
}

# 快捷别名
alias gwork='git_work'              # 切换到工作账户
alias gpersonal='git_personal'      # 切换到个人账户
alias gwho='git_whoami'             # 查看当前用户
alias glwork='git_local_work'       # 当前仓库使用工作账户
alias glpersonal='git_local_personal' # 当前仓库使用个人账户
alias glwho='git_local_whoami'      # 查看当前仓库配置

# =============================================================================
# Chezmoi GitHub 同步快捷命令
# =============================================================================

# 配置 GitHub token 到远程仓库
function setup_git_token() {
    if [[ -n "$GITHUB_TOKEN" ]]; then
        cd ~/.local/share/chezmoi
        git remote set-url origin "https://${GITHUB_TOKEN}@github.com/zhaowei2025/dotfile.git"
        cd -
    fi
}

# 同步配置到 GitHub
function dotfiles_push() {
    echo "📤 同步 dotfiles 到 GitHub..."
    
    # 确保使用个人账户
    gpersonal
    
    # 设置 token 认证
    setup_git_token
    
    # 添加所有更改
    chezmoi git -- add .
    
    # 提交更改
    local commit_msg="${1:-更新 dotfiles 配置 $(date '+%Y-%m-%d %H:%M:%S')}"
    chezmoi git -- commit -m "$commit_msg"
    
    # 推送到 GitHub
    chezmoi git -- push origin main || chezmoi git -- push --set-upstream origin main
    
    echo "✅ dotfiles 同步完成！"
}

# 从 GitHub 拉取配置
function dotfiles_pull() {
    echo "📥 从 GitHub 拉取 dotfiles..."
    
    # 确保使用个人账户
    gpersonal
    
    # 设置 token 认证
    setup_git_token
    
    # 拉取最新更改
    chezmoi git -- pull origin main
    
    # 应用更改
    chezmoi apply
    
    echo "✅ dotfiles 拉取完成！"
}

# 查看 dotfiles 状态
function dotfiles_status() {
    echo "📊 Dotfiles 状态："
    echo ""
    
    # 显示当前 Git 用户
    gwho
    echo ""
    
    # 显示 chezmoi 状态
    echo "📋 Chezmoi 状态："
    chezmoi status
    echo ""
    
    # 显示 Git 仓库状态
    echo "📋 Git 仓库状态："
    chezmoi cd && git status && cd -
}

# 初始化新机器的 dotfiles
function dotfiles_init() {
    echo "🚀 初始化 dotfiles 到新机器..."
    
    # 如果已经初始化，先删除
    if [ -d "$HOME/.local/share/chezmoi" ]; then
        echo "⚠️  检测到已存在的 chezmoi 配置，正在备份..."
        mv "$HOME/.local/share/chezmoi" "$HOME/.local/share/chezmoi.backup.$(date +%Y%m%d_%H%M%S)"
    fi
    
    # 使用 token 克隆并初始化
    if [[ -n "$GITHUB_TOKEN" ]]; then
        chezmoi init "https://${GITHUB_TOKEN}@github.com/zhaowei2025/dotfile.git"
    else
        chezmoi init "https://github.com/zhaowei2025/dotfile.git"
    fi
    
    # 应用配置
    chezmoi apply
    
    echo "✅ dotfiles 初始化完成！"
}

# 一键编辑并推送配置
function dotfiles_edit() {
    local file="${1:-~/.zshrc}"
    echo "✏️  编辑配置文件: $file"
    chezmoi edit "$file"
    
    echo "📤 自动提交并推送更改..."
    dfpush "编辑 $file"
}

# 快速提交当前所有更改
function dotfiles_quick_save() {
    local msg="${1:-快速保存 $(date '+%Y-%m-%d %H:%M:%S')}"
    echo "💾 快速保存所有更改..."
    
    chezmoi git -- add .
    chezmoi git -- commit -m "$msg" && dfpush "$msg"
}

# 快捷别名
alias dfpush='dotfiles_push'        # 推送配置
alias dfpull='dotfiles_pull'        # 拉取配置
alias dfstatus='dotfiles_status'    # 查看状态
alias dfinit='dotfiles_init'        # 初始化新机器
alias dfedit='dotfiles_edit'        # 一键编辑并推送配置
alias dfquick='dotfiles_quick_save'  # 快速提交当前所有更改

echo "🎉 ZSH 增强配置已加载！"
echo ""
echo "💡 代理管理命令："
echo "   pon/proxy_on     - 开启代理"
echo "   poff/proxy_off   - 关闭代理"
echo "   pst/proxy_status - 查看代理状态"
echo "   ptest/proxy_test - 测试代理连接"
echo "   gpon/git_proxy_on    - 开启 Git 代理"
echo "   gpoff/git_proxy_off  - 关闭 Git 代理"
echo "   gpst/git_proxy_status - 查看 Git 代理状态"
echo ""
echo "📝 现代化工具命令 (如果已安装)："
echo "   fd <pattern>     - 更好的 find"
echo "   rg <pattern>     - 更好的 grep"
echo "   bat <file>       - 更好的 cat"
echo "   exa/eza -la      - 更好的 ls"
echo "   lg               - LazyGit"
echo "   btm              - 更好的 top"
echo "   dust             - 更好的 du"
echo ""
echo "🚀 增强功能命令："
echo "   mkcd <dir>       - 创建并进入目录"
echo "   extract <file>   - 智能解压"
echo "   serve [port]     - 快速HTTP服务器"
echo "   sysinfo          - 系统信息"
echo "   backup <file>    - 创建备份"
echo "   fvim             - 模糊查找编辑文件"
echo "   fcd              - 模糊查找进入目录"
echo ""
echo "👥 Git 用户切换命令："
echo "   gwork, gpersonal, gwho, glwork, glpersonal, glwho"
echo ""
echo "📦 Dotfiles 同步命令："
echo "   dfpush, dfpull, dfstatus, dfinit, dfedit, dfquick"
echo ""
if [[ -f "$ZSH/oh-my-zsh.sh" ]]; then
    echo "✅ Oh My Zsh 已加载"
else
    echo "⚠️  Oh My Zsh 未安装，运行安装脚本来获取更多功能"
fi

# =============================================================================
# 环境变量设置
# =============================================================================

# 设置终端真彩色支持
export COLORTERM=truecolor

# 加载私有环境变量文件（不会被 git 追踪）
if [[ -f ~/.env.private ]]; then
    source ~/.env.private
fi

# 如果存在项目特定的环境变量文件也加载
if [[ -f ./.env.local ]]; then
    source ./.env.local
fi
